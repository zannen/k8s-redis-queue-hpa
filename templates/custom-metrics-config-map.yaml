# See /licensing.md for licence details.
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: adapter-config
  namespace: suihei
data:
  config.yaml: |
    # See:
    # - https://github.com/kubernetes-sigs/prometheus-adapter/blob/v0.9.1/docs/config.md
    # - https://github.com/kubernetes-sigs/prometheus-adapter/blob/v0.9.1/pkg/config/config.go
    ---
    rules:
      # Call prometheus API with: /api/v1/series?match[]=<<seriesQuery>>&start=<<timestamp>>

      - seriesQuery: '{__name__=~"^container_.*",container_name!="POD",namespace!="",pod_name!=""}'
        seriesFilters: []
        resources:
          overrides:
            namespace:
              resource: namespace
            pod_name:
              resource: pod
        name:
          matches: ^container_(.*)_seconds_total$
          as: ""
        metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container_name!="POD"}[1m])) by (<<.GroupBy>>)

      - seriesQuery: '{__name__=~"^container_.*",container_name!="POD",namespace!="",pod_name!=""}'
        seriesFilters:
          - isNot: ^container_.*_seconds_total$
        resources:
          overrides:
            namespace:
              resource: namespace
            pod_name:
              resource: pod
        name:
          matches: ^container_(.*)_total$
          as: ""
        metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container_name!="POD"}[1m])) by (<<.GroupBy>>)

      - seriesQuery: '{__name__=~"^container_.*",container_name!="POD",namespace!="",pod_name!=""}'
        seriesFilters:
          - isNot: ^container_.*_total$
        resources:
          overrides:
            namespace:
              resource: namespace
            pod_name:
              resource: pod
        name:
          matches: ^container_(.*)$
          as: ""
        metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>,container_name!="POD"}) by (<<.GroupBy>>)

      - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
        seriesFilters:
          - isNot: .*_total$
        resources:
          template: <<.Resource>>
        name:
          matches: ""
          as: ""
        metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)

      - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
        seriesFilters:
          - isNot: .*_seconds_total
        resources:
          template: <<.Resource>>
        name:
          matches: ^(.*)_total$
          as: ""
        metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>>)

      - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
        seriesFilters: []
        resources:
          template: <<.Resource>>
        name:
          matches: ^(.*)_seconds_total$
          as: ""
        metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>>)

      # The metric ID "yourappnamehere_redis_queue_length" comes from:
      # https://github.com/zannen/redis-queue-monitor-worker/blob/main/app/__init__.py#L106
      - seriesQuery: yourappnamehere_redis_queue_length{pod!=""}
        resources:
          template: <<.Resource>>
          overrides:
            # instance:
            #   resource: node
            # k8s_name:
            #   resource: service
            # namespace:
            #   resource: namespace
            # pod:
            #   resource: pod
          namespaced: true
        name:
          as: redisqueue_length
        metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>,queue="high"}) by (<<.GroupBy>>)

    resourceRules:
      cpu:
        containerQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>>)
        nodeQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, id='/'}[1m])) by (<<.GroupBy>>)
        resources:
          overrides:
            instance:
              resource: node
            namespace:
              resource: namespace
            pod_name:
              resource: pod
        containerLabel: container_name
      memory:
        containerQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>}) by (<<.GroupBy>>)
        nodeQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,id='/'}) by (<<.GroupBy>>)
        resources:
          overrides:
            instance:
              resource: node
            namespace:
              resource: namespace
            pod_name:
              resource: pod
        containerLabel: container_name
      window: 1m
